use std::collections::HashMap;

#[rustfmt::skip]
const ELEMENTS: [(&str, &[usize]); 92] = [
  ("1112"                                      , &[62]                    ),
  ("1112133"                                   , &[63, 61]                ),
  ("111213322112"                              , &[64]                    ),
  ("111213322113"                              , &[65]                    ),
  ("1113"                                      , &[67]                    ),
  ("11131"                                     , &[68]                    ),
  ("111311222112"                              , &[83, 54]                ),
  ("111312"                                    , &[69]                    ),
  ("11131221"                                  , &[70]                    ),
  ("1113122112"                                , &[75]                    ),
  ("1113122113"                                , &[76]                    ),
  ("11131221131112"                            , &[81]                    ),
  ("111312211312"                              , &[77]                    ),
  ("11131221131211"                            , &[78]                    ),
  ("111312211312113211"                        , &[79]                    ),
  ("111312211312113221133211322112211213322112", &[80, 28, 89]            ),
  ("111312211312113221133211322112211213322113", &[80, 28, 90]            ),
  ("11131221131211322113322112"                , &[80, 29]                ),
  ("11131221133112"                            , &[74, 28, 91]            ),
  ("1113122113322113111221131221"              , &[74, 31]                ),
  ("11131221222112"                            , &[71]                    ),
  ("111312212221121123222112"                  , &[72]                    ),
  ("111312212221121123222113"                  , &[73]                    ),
  ("11132"                                     , &[82]                    ),
  ("1113222"                                   , &[85]                    ),
  ("1113222112"                                , &[86]                    ),
  ("1113222113"                                , &[87]                    ),
  ("11133112"                                  , &[88, 91]                ),
  ("12"                                        , &[0]                     ),
  ("123222112"                                 , &[2]                     ),
  ("123222113"                                 , &[3]                     ),
  ("12322211331222113112211"                   , &[1, 60, 28, 84]         ),
  ("13"                                        , &[4]                     ),
  ("131112"                                    , &[27]                    ),
  ("13112221133211322112211213322112"          , &[23, 32, 60, 28, 89]    ),
  ("13112221133211322112211213322113"          , &[23, 32, 60, 28, 90]    ),
  ("13122112"                                  , &[6]                     ),
  ("132"                                       , &[7]                     ),
  ("13211"                                     , &[8]                     ),
  ("132112"                                    , &[9]                     ),
  ("1321122112"                                , &[20]                    ),
  ("132112211213322112"                        , &[21]                    ),
  ("132112211213322113"                        , &[22]                    ),
  ("132113"                                    , &[10]                    ),
  ("1321131112"                                , &[18]                    ),
  ("13211312"                                  , &[11]                    ),
  ("1321132"                                   , &[12]                    ),
  ("13211321"                                  , &[13]                    ),
  ("132113212221"                              , &[14]                    ),
  ("13211321222113222112"                      , &[17]                    ),
  ("1321132122211322212221121123222112"        , &[15]                    ),
  ("1321132122211322212221121123222113"        , &[16]                    ),
  ("13211322211312113211"                      , &[19]                    ),
  ("1321133112"                                , &[5, 60, 28, 91]         ),
  ("1322112"                                   , &[25]                    ),
  ("1322113"                                   , &[26]                    ),
  ("13221133112"                               , &[24, 28, 91]            ),
  ("1322113312211"                             , &[24, 28, 66]            ),
  ("132211331222113112211"                     , &[24, 28, 84]            ),
  ("13221133122211332"                         , &[24, 28, 67, 60, 28, 88]),
  ("22"                                        , &[60]                    ),
  ("3"                                         , &[32]                    ),
  ("3112"                                      , &[39]                    ),
  ("3112112"                                   , &[40]                    ),
  ("31121123222112"                            , &[41]                    ),
  ("31121123222113"                            , &[42]                    ),
  ("3112221"                                   , &[37, 38]                ),
  ("3113"                                      , &[43]                    ),
  ("311311"                                    , &[47]                    ),
  ("31131112"                                  , &[53]                    ),
  ("3113112211"                                , &[48]                    ),
  ("3113112211322112"                          , &[49]                    ),
  ("3113112211322112211213322112"              , &[50]                    ),
  ("3113112211322112211213322113"              , &[51]                    ),
  ("311311222"                                 , &[46, 37]                ),
  ("311311222112"                              , &[46, 54]                ),
  ("311311222113"                              , &[46, 55]                ),
  ("3113112221131112"                          , &[46, 56]                ),
  ("311311222113111221"                        , &[46, 57]                ),
  ("311311222113111221131221"                  , &[46, 58]                ),
  ("31131122211311122113222"                   , &[46, 59]                ),
  ("3113112221133112"                          , &[46, 32, 60, 28, 91]    ),
  ("311312"                                    , &[44]                    ),
  ("31132"                                     , &[45]                    ),
  ("311322113212221"                           , &[52]                    ),
  ("311332"                                    , &[37, 28, 88]            ),
  ("3113322112"                                , &[37, 29]                ),
  ("3113322113"                                , &[37, 30]                ),
  ("312"                                       , &[33]                    ),
  ("312211322212221121123222112"               , &[34]                    ),
  ("312211322212221121123222113"               , &[35]                    ),
  ("32112"                                     , &[36]                    )
];

fn look_and_say(s: &[u8]) -> Vec<u8> {
    let mut count = 0;
    let mut counted = 0;
    let mut r = Vec::new();

    for &c in s.iter().chain(std::iter::once(&0)) {
        if c == counted {
            count += 1;
        } else {
            if count > 0 {
                r.push(count);
                r.push(counted);
            }
            counted = c;
            count = 1;
        }
    }

    r
}

fn digits(s: &str) -> Vec<u8> {
    s.bytes().map(|c| c - b'0').collect()
}

fn slow(s: &str) {
    let mut current = digits(s);

    for _ in 0..40 {
        current = look_and_say(&current);
    }

    println!("{}", current.len());

    for _ in 0..10 {
        current = look_and_say(&current);
    }

    println!("{}", current.len());
}

fn cosmological_cache(i: usize, n: u8, cache: &mut HashMap<(usize, u8), usize>) -> usize {
    if let Some(&cached) = cache.get(&(i, n)) {
        return cached;
    }

    let ans = if n == 0 {
        ELEMENTS[i].0.len()
    } else {
        ELEMENTS[i]
            .1
            .iter()
            .map(|&j| cosmological_cache(j, n - 1, cache))
            .sum()
    };

    cache.insert((i, n), ans);
    ans
}

fn cosmological(i: usize) {
    let mut cache = HashMap::new();

    println!("{}", cosmological_cache(i, 40, &mut cache));
    println!("{}", cosmological_cache(i, 50, &mut cache));
}

fn main() {
    let input = std::env::args()
        .nth(1)
        .unwrap_or_else(adventofcode::read_input_file);

    match ELEMENTS.iter().position(|(s, _)| *s == input) {
        Some(i) => cosmological(i),
        None => slow(&input),
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use adventofcode::tests;

    tests! {
        test {
            t1("1", "11");
            t2("11", "21");
            t3("21", "1211");
            t4("1211", "111221");
            t5("111221", "312211");
        }
    }

    fn test(s: &str, expect: &str) {
        assert_eq!(look_and_say(&digits(s)), digits(expect));
    }
}
